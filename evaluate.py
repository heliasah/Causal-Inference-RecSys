# -*- coding: utf-8 -*-
"""Evaluate.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1toE1aZ0O7C9SkaBhmgNCyaALMaPC5_bQ
"""

def recommend_movies(user_id, top_n=5):
    """Generate movie recommendations for a given user."""
    # Compute predicted ratings for all movies for the given user
    user_vector = w1_P1[user_id]
    predicted_ratings = np.dot(w1_M1, user_vector) + p_score[:, user_id]

    # Get top N movie IDs with the highest predicted ratings
    top_movies = np.argsort(predicted_ratings)[::-1][:top_n]
    return top_movies

# Example usage:
user_id_to_recommend = 1  # Replace with a valid user ID
recommended_movies = recommend_movies(user_id_to_recommend, top_n=10)
print(f"Top 10 recommended movies for User {user_id_to_recommend}: {recommended_movies}")
user_rated_movies = train_df[train_df['user_id'] == user_id_to_recommend]
print(f"Movies rated by User {user_id_to_recommend}:")
print(user_rated_movies)
top_movie_popularity = p_score.sum(axis=1)
recommended_popularity = top_movie_popularity[recommended_movies]
print(f"Popularity scores of recommended movies: {recommended_popularity}")

import pandas as pd

# Load data
ratings = pd.read_csv('ml-100k/u.data', sep='\t', names=['user_id', 'movie_id', 'rating', 'timestamp'])
movies = pd.read_csv('ml-100k/u.item', sep='|', encoding='latin-1', header=None)

# Analyze Movie 49 and 643
movie_stats = ratings.groupby('movie_id').agg(avg_rating=('rating', 'mean'), num_ratings=('rating', 'count'))
movie_49 = movie_stats.loc[8]
movie_643 = movie_stats.loc[334]

print("Movie 49:", movie_49)
print("Movie 643:", movie_643)